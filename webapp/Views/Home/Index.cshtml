@model LivellPayRoll.Models.TimeSheetLog

<!-- MAIN CONTENT -->
<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
                <h1 class="page-title txt-color-blueDark">
                    <i class="fa fa-home "></i>
                    Home
                    <span>
                        >
                        Welcome
                    </span>
                </h1>
            </div>
            <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
                <a href="/account/generalset">
                    <div id="clock1" class="pull-right"></div>
                </a>
                

            </div>
        </div>
        <!-- Emplyee View -->
        @if (SystemVariates.LoginRoleId == "R03")
        {
            Html.RenderPartial("_EmplyeeView", Model);
        }
        else
        {
            Html.RenderPartial("_ManageView", Model);
        }

        <!-- end View -->
    </section>


    <!-- ui-dialog -->
    @{Html.RenderPartial("_JobInfo"); }
    <!-- ends ui-dialog -->
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
    <!-- PAGE RELATED PLUGIN(S) -->
    <script src="/scripts/plugin/moment/moment.min.js"></script>
    <script src="/scripts/plugin/fullcalendar/jquery.fullcalendar.min.js"></script>
    <script src="/scripts/plugin/knob/jquery.knob.min.js"></script>
    <script src="~/Scripts/mydigitclock/jquery.MyDigitClock.js"></script>


    <script type="text/javascript">

        function refreshTime(StartDate) {
            var starTime = UtcToLocal(new Date(StartDate));
            var nowTimne = new Date();
            if("@ViewBag.DaylightSavingTime" == "True"){
                 nowTimne = new Date(nowTimne.valueOf() + 60*60*1000);
            }

            var allTime = nowTimne - starTime;
            var leave1 = allTime % (3600 * 1000)    //计算天数后剩余的毫秒数
            var hours = Math.floor(allTime / (3600 * 1000))
            //计算相差分钟数
            var leave2 = leave1 % (60 * 1000)        //计算小时数后剩余的毫秒数
            var minutes = Math.floor(leave1 / (60 * 1000))
            var seconds = Math.round(leave2 / 1000)
            var newTime = pad(hours, 2) + ':' + pad(minutes, 2) + ':' + pad(seconds, 2);
            $('#TimeSheetPiece').html(newTime);
            $('#TimeSheetStarDate').html(new Date(starTime).Format("yyyy-MM-dd"));
            if(seconds%2 ==1){
                $('#TimeLED').attr('class','badge pull-right bg-color-green')
            }else{
                $('#TimeLED').attr('class','badge pull-right bg-color-orange')
            }
        }

        function autoTime(StartDate) {
            var time = StartDate;
            var sI = setInterval(function () { refreshTime(time); }, 1000);
            return sI;
        }

        function timeShow(StartDate) {
            $('#btn-reset').show()
            $('#btn-in').hide()
            $('#btn-out').show()
            $('#TimeShow').show()
            var sI = autoTime(StartDate);
            $('#JobId').attr("disabled", "disabled");
            $('#description').attr("disabled", "disabled");
            $('#JobId').val('@((Model!=null)?Model.JobId:0)');
            $('#description').val('@((Model!=null)?Model.Note:"")');

            return sI
        }
        function timeHide(sI) {
            $('#btn-in').show()
            $('#TimeShow').hide()
            $('#btn-reset').hide()
            $('#btn-out').hide()
            $('#JobId').attr("disabled", false);
            $('#description').attr("disabled", false);
            $('#JobId').val("@ViewBag.defaultjob");
            $('#description').val("");
            clearInterval(sI);
        }

        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            var StartDate = "@ViewBag.StartDate";
            var sI;

            if ("@ViewBag.StartDate" == 0) {
                timeHide(sI);
            } else {
                refreshTime(StartDate);
                sI = timeShow(StartDate);
            };

            /*
             *MyDigitClock
             */
            var setClockTimeZome = @ViewBag.TimeZone;
            if("@ViewBag.DaylightSavingTime" == "True"){
                 setClockTimeZome = setClockTimeZome + 1;
            };

            $("#clock1").MyDigitClock({
                fontSize: 38,
                fontColor: "grey",
                fontWeight: "bold",
                background: "",
                timezone: setClockTimeZome ,
                bAmPm: true,

            });

            $('#btn-in').click(function () {
                var bootstrapValidator = $('#timecard-event-form').data('bootstrapValidator');
                bootstrapValidator.validate();
                if (bootstrapValidator.isValid()) {
                    var JobId = $('#JobId').val();
                    var Note = $('#description').val();
                    //var isDLT = isDayLightTime();
                    //var isDayLightTime = true;
                    //var par = $("#timecard-event-form").serializeArray();
                    $.post("/Home/TimeIn", { "JobId": JobId, "Note": Note }, function (data) {
                        if (data.code == "1") {
                            StartDate = data.StartDate;
                            refreshTime(StartDate);
                            sI = timeShow(StartDate);
                            $('#JobId').val(data.JobId);
                            $('#description').val(data.Note);
                        } else {
                            ErrorBox(data.message);
                        }
                    })
                }

            })

            $('#btn-reset').click(function () {
                var par = $("#timecard-event-form").serializeArray();
                $.post("/Home/TimeReset", par, function (data) {
                    if (data.code == "1") {
                        timeHide(sI);

                    } else {
                        ErrorBox(data.message);
                    }
                })
            })

            $('#btn-out').click(function () {
                var par = $("#timecard-event-form").serializeArray();
                $.post("/Home/TimeOut", par, function (data) {
                    if (data.code == "1") {
                        timeHide(sI);
                        location.reload();
                    } else {
                        ErrorBox(data.message);
                    }
                })
            })


            "use strict";

            var date = new Date();
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();

            /*
             * KNOB
            */
            $('.knob').knob({
                change: function (value) {
                    //console.log("change : " + value);
                },
                release: function (value) {
                    //console.log(this.$.attr('value'));
                    //console.log("release : " + value);
                },
                cancel: function () {
                    //console.log("cancel : ", this);
                }
            });


            /*
             * 时间表初始化
             */
            /* BASIC ;*/
            var responsiveHelper_dt_basic = undefined;
            var responsiveHelper_datatable_fixed_column = undefined;
            var responsiveHelper_datatable_col_reorder = undefined;
            var responsiveHelper_datatable_tabletools = undefined;
            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-6 col-sm-6'T><'col-sm-6 col-xs-6 hidden-xs'f>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",

                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "PayRoll_PDF",
                           "sPdfMessage": "PayRoll PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by PayRoll <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            $('#btn-time-delete').click(function () {
                var Id = $('#TimeCard-Id').val();
                $.post("/Home/TimeDelete", { Id: Id }, function (data) {
                    if (data.code == "1") {
                        $('#JobInfoModal').modal('hide');
                        $("[id='" + Id + "']").parent().parent().remove();
                        SuccessBox('Delete Successfully!');
                    } else {
                        ErrorBox(data.message);
                    }
                })
            })

            $.getJSON('@Url.Action("GetJobList", "Home")',{ PageIndex : 1, PageSize : 4 }, function (data) {
                var PageIndex = data['PageIndex'];
                var PageNum = data['PageNum'];

                $('#thisPage').html(PageIndex);
                $('#totalPage').html(PageNum);

                $('#Manager-JobList').empty();
                $.each(data['dataString'], function(i) {
                    var dom = '<div class="col-xs-6 col-sm-6 col-md-12 col-lg-12">'+
                               '<a class="jobItem-link" href="javascript:void(0);" data-jobname="'+this['JobName']+'"  data-jobid="'+this['JobId']+'"><span title="This month/All" class="text">'+(i+1)+'. '+this['JobName']+  ' [ <i class="fa fa-user"></i>  '+this['PCount']+ ' ]<span class="pull-right">'+this["ThisTime"]+' / '+this["TimeTotal"]+' (M)</span> </span></a>'+
                                '<div title="This month : '+this["ThisTime"]+' (minute)" class="progress">'+
                                    '<div class="progress-bar '+ this["BarColor"]+'" style="width: '+this["PCT"]+';"></div></div></div>'

                    $('#Manager-JobList').append(dom);

                });
                if(PageIndex==1){
                    $('#ListPrev').attr('disabled',"true");
                }else if(PageIndex==PageNum){
                    $('#ListNext').attr('disabled',"true");
                }
                if(PageNum<=1){
                    $('.btn-list').hide();
                }

            });

            $('.btn-list').click(function(){
                var PageSize = 4;
                var btnType = $(this).attr('id');
                var PageIndex = $('#thisPage').html();
                if(btnType=='ListPrev'){
                    PageIndex--;
                }else if(btnType=='ListNext'){
                    PageIndex++;
                }

                $.getJSON('@Url.Action("GetJobList", "Home")',{ PageIndex : PageIndex, PageSize : PageSize }, function (data) {
                    var PageIndex = data['PageIndex'];
                    var PageNum = data['PageNum'];

                    $('#thisPage').html(PageIndex);
                    $('#totalPage').html(PageNum);
                    $('#Manager-JobList').empty();
                    $.each(data['dataString'], function(i) {
                        var dom = '<div class="col-xs-6 col-sm-6 col-md-12 col-lg-12">'+
                                   '<a class="jobItem-link" href="javascript:void(0);" data-jobname="'+this['JobName']+'"  data-jobid="'+this['JobId']+'"><span title="This month/All" class="text">'+((PageIndex-1)*PageSize+(i+1))+'. '+this['JobName']+  ' [ <i class="fa fa-user"></i>  '+this['PCount']+ ' ]<span class="pull-right">'+this["ThisTime"]+' / '+this["TimeTotal"]+' (M)</span> </span></a>'+
                                    '<div title="This month : '+this["ThisTime"]+' (minute)" class="progress">'+
                                        '<div class="progress-bar '+ this["BarColor"]+'" style="width: '+this["PCT"]+';"></div></div></div>'
                        $('#Manager-JobList').append(dom);

                    });
                    $('#ListPrev').removeAttr("disabled");
                    $('#ListNext').removeAttr("disabled");
                    if(PageIndex==1){
                        $('#ListPrev').attr('disabled',"true");
                    }else if(PageIndex==PageNum){
                        $('#ListNext').attr('disabled',"true");
                    }
                    if(PageNum<=1){
                        $('.btn-list').hide();
                    }
                })
            });


            pageSetUp();

            // LINE CHART
            // ref: http://www.chartjs.org/docs/#line-chart-introduction
            var lineOptions = {
                ///Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.4,
                //Boolean - Whether to show a dot for each point
                pointDot: true,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a colour
                datasetFill: true,
                //Boolean - Re-draw chart on page resize
                responsive: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
            };

            var lineData = {
                labels: ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct. ", "Nov.", "Dec."],
                datasets: [
                    {
                        label: "My First dataset",
                        fillColor: "rgba(220,220,220,0.2)",
                        strokeColor: "rgba(220,220,220,1)",
                        pointColor: "rgba(220,220,220,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(220,220,220,1)",
                        data: [@(((Dictionary<string, double>)ViewBag.avgMonthTime)["M1"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M2"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M3"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M4"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M5"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M6"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M7"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M8"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M9"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M10"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M11"]),
                               @(((Dictionary<string, double>)ViewBag.avgMonthTime)["M12"])]
                    },
                    {
                        label: "My Second dataset",
                        fillColor: "rgba(151,187,205,0.2)",
                        strokeColor: "rgba(151,187,205,1)",
                        pointColor: "rgba(151,187,205,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(151,187,205,1)",
                        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                    }
                ]
            };

            // render chart
            var ctx = document.getElementById("lineChart").getContext("2d");
            var myNewChart = new Chart(ctx).Line(lineData, lineOptions);

            // END LINE CHART


            // BAR CHART

            var barOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 1,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //Boolean - Re-draw chart on page resize
                responsive: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
            }

            var barData = {
                labels: ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct. ", "Nov.", "Dec."],
                datasets: [
                   {
                       label: "My Second dataset",
                       fillColor: "rgba(151,187,205,0.5)",
                       strokeColor: "rgba(151,187,205,0.8)",
                       highlightFill: "rgba(151,187,205,0.75)",
                       highlightStroke: "rgba(151,187,205,1)",
                       data: [@(((Dictionary<string, double>)ViewBag.dicYearTime)["M1"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M2"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M3"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M4"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M5"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M6"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M7"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M8"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M9"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M10"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M11"]),
                               @(((Dictionary<string, double>)ViewBag.dicYearTime)["M12"])]
                   }
                ]
            };

            // render chart
            var barctx = document.getElementById("barChart").getContext("2d");
            var myNewbarChart = new Chart(barctx).Bar(barData, barOptions);
            //var legend = myNewbarChart.generateLegend();
            //$('#TotalTimeShow').html(legend);

            // END BAR CHART


            // PIE CHART
            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - types of animation
                animationEasing: "easeOutBounce",
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - Re-draw chart on page resize
                responsive: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
            };

            var pieData = [
               {
                   value: @(((Dictionary<string, double>)ViewBag.TimeSheetType)["RegularWorkTime"]),
                   color: "rgba(230,155,3,0.9)",
                   highlight: "rgba(230,155,3,0.7)",
                   label: "Regulartime"
               },
                {
                    value: @(((Dictionary<string, double>)ViewBag.TimeSheetType)["OverTimeWorkTime"]),
                    color: "rgba(169, 3, 41, 0.9)",
                    highlight: "rgba(169, 3, 41, 0.7)",
                    label: "Overtime"
                },
                {
                    value: @(((Dictionary<string, double>)ViewBag.TimeSheetType)["DoubleWorkTime"]),
                    color: "rgba(18, 55, 85, 0.9)",
                    highlight: "rgba(18, 55, 85, 0.7)",
                    label: "Doubletime"
                },
               {
                    value: @(((Dictionary<string, double>)ViewBag.TimeSheetType)["OtherTime"]),
                   color: "rgba(151, 151, 151, 0.9)",
                    highlight: "rgba(151, 151, 151, 0.7)",
                    label: "Other"
               }
            ];

            // render chart
            var Piectx = document.getElementById("pieChart").getContext("2d");
            var myNewPieChart = new Chart(Piectx).Pie(pieData, pieOptions);

            // END PIE CHART


            $("#Manager-JobList").on("click",".jobItem-link",function(){
                var jobId = $(this).attr('data-jobid');
                var jobName = $(this).attr('data-jobname');
                $('#job-time-title').html(jobName);
                $.getJSON('@Url.Action("GetJobChart", "Home")',{ jobId : jobId }, function (data) {
                    var i=0;
                    $.each( data, function(index, content)
                    {
                        console.log("index:"+index+"    content:"+content);
                        myNewChart.datasets[1].points[i].value = content;
                        i++;
                    });
                    myNewChart.update();
                })

            });
             
            $('.TimeList-TotalWorkTime').click(function(){
                var Id = $(this).attr('Id');
                $.post("/Home/TimeCard", { Id: Id }, function (data) {
                    $('#JobInfoModal').modal();
                    $('#TimeCard-JobName').html(data.JobName);
                    $('#TimeCard-Date').html(data.Date);
                    $('#TimeCard-Note').html(data.Note);

                    $('#TimeCard-Stu').remove();
                    if (data.Paid) {
                        //$('#TimeCard-Stu').html('<i class="fa fa-check"></i> Paid');
                        $('#JobInfoModal h2').after('<span class="badge bg-color-greenLight pull-right" id="TimeCard-Stu"><i class="fa fa-check"></i>  Paid</span>');
                        $('#btn-time-delete').hide();
                    }else{
                        if(data.Status == "Pending"){
                            $('#JobInfoModal h2').after('<span class="badge bg-color-blue pull-right" id="TimeCard-Stu">'+data.Status+'</span>');
                        }else if (data.Status == "Passing"){
                            $('#JobInfoModal h2').after('<span class="badge bg-color-greenLight pull-right" id="TimeCard-Stu">'+data.Status+'</span>');
                            $('#btn-time-delete').hide();
                        }else{
                            $('#JobInfoModal h2').after('<span class="badge bg-color-red pull-right" id="TimeCard-Stu">'+data.Status+'</span>');
                            $('#btn-time-delete').hide();
                        }
                    
                    }
                    $('#TimeCard-Id').val(Id);
                    $('#TimeCard-StartTime').html(new Date(UtcToLocal(new Date(data.StartDate))).Format("yyyy-MM-dd hh:mm:ss"));
                    $('#TimeCard-StopTime').html(new Date(UtcToLocal(new Date(data.StopDate))).Format("yyyy-MM-dd hh:mm:ss"));
                    $('#TimeCard-TotalTime').html(data.TotalWorkTime + ' (minute)');

                })

            })
        })

    </script>
}